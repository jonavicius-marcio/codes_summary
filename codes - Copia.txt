
############################################### config 

# para a maquina toda 
git config --global user.email "you@example.com"
git config --global user.name "Your Name"

# para um projeto especifico
git config --local user.email "you@example.com"
git config --local user.name "Your Name"

#verificar
git config user.name
git config user.email

#################################################  admin server

# add server
git remote add origin new-URL

# mostra endereço do servidor
git remote -v

# remove server
git remote remove origin


#################################################  upload

# mostra endereço do servidor
git remote -v

# remove server
git remote remove origin


git init

git status

git add index.html

git add . para que todos os arquivos

git rm para remover o arquivo

git commit -m "mensagem"

#################################################  log 

git log

git log --oneline

# ver modificações
git log -p

# mostra só os 2 ultimos comittes 
git log -n 2


https://devhints.io/git-log 

# .gitignore

coloque o nome dos arquivos a serem ignorados dentro do arquivo .gitignore


#################################################  servidor local 
# vá até  a pasta do servidor e digite 
git init --bare, cria servidor repositório  puro

git remote add repository_name  diretorio (ex: git remote add local C:/Users/ALURA/Documents/git-e-github/servidor)

#lista os servidores que o repositorio local conhece
git remote

# mostra endereço do servidor
git remote -v

# clone 
git clone diretorio 


# push, envia 
git push name_diretorio master (ex git push local master) 

# pull, copia 
git pull local master

git remote rename origin local


# -u define que sempre que usarmos git push e estivermos na master, o envio será feito para origin
git push -u origin master

git push origin  


# Antes de comitar é preciso fazer um 
git pull origin para pegar as atualizações


# nunca commite um código que não funciona



###################################################  Branch 

git branch

https://git-school.github.io/visualizing-git/

# criar uma branch 
git branch titulo

# mudar para a branch 
git checkout titulo or git checkout -b titulo (-b cria a branch) 

# retorna para master 
git checkout main

# merger. depois de trabalhar no titulo, 
git commit -m "Editando título"

# fazer um merge da branch titulo com a main. 
git checkout main
git merge titulo

# juntar os arquivos sem perder a log dos commits 
git rebase titulo

#remover branch 
git branch -d
# Caso haja algum conflito, como o branch a ser deletado estar à frente do branch atual, ou seja, se novo-release tivesse alguns commits à frente do master
git branch -D


##################################################  Desfazer

# para desfazer alteração que ainda não foram comitadas 
git checkout --filename (ex: git checkout --index.html) 

# para desfazer uma alteração que for marcada para comite com add 
git reset HEAD filename ( ex.  git reset HEAD index.html )

# defazer uma alteração já comitadas. Git log para pegar o hash 
git log 
git revert hash (ex: git revert 545i09239203-0232v0iodfd ) 

git log --graph

# confirmar alteração
:x + enter 

####################  guardar alteração em outro arquivo para continuar depois 
git stash 

# lista os arquivos guardados
git stash list 

# restaurar um arquivo que estava guardado
git stash apply numero_arquivo (ex git stash apply 0) -stash@{0}

#é preciso deletar o arquivo guardado
git stash drop


#### voltar para um commit X
git log --oneline
git checkout 54727de

# mostrar alteração que ainda não foram comitadas
git diff

# Comparar comites 
git log -p
git diff ea539b3..6ca12ac



















